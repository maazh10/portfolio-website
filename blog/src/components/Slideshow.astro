---
type Props = {
  titles?: string[];
  locations?: string[];
  times?: string[];
  captions?: string[];
  imagePaths: string[];
  alt: string;
};

const { titles, locations, times, captions, imagePaths, alt } = Astro.props;

function getTimeColor(timeString: string): string {
  const times = timeString.split(" / ");
  const firstTime = times[0];

  const hour = parseInt(firstTime.split(":")[0]);
  const isPM = firstTime.includes("PM");
  const adjustedHour = isPM ? hour + 12 : hour;

  // Dawn: 5:00 AM - 6:30 AM (soft blue)
  if (adjustedHour >= 5 && adjustedHour < 6.5) return "#7790aa";
  // Morning: 6:30 AM - 10:00 AM (bright blue)
  if (adjustedHour >= 6.5 && adjustedHour < 10) return "#4d94ff";
  // Midday: 10:00 AM - 4:00 PM (yellow)
  if (adjustedHour >= 10 && adjustedHour < 16) return "#ffd700";
  // Golden Hour: 4:00 PM - 8:30 PM (orange-gold)
  if (adjustedHour >= 16 && adjustedHour < 20.5) return "#ffa500";
  // Blue Hour: 8:30 PM - 10:00 PM (deep blue)
  if (adjustedHour >= 20.5 && adjustedHour < 22) return "#4169e1";
  // Night: After 8:30 PM (dark blue)
  return "#1a237e";
}
---

<div class="slideshow-container">
  <div class="custom-swiper">
    <div class="custom-swiper-wrapper">
      {
        imagePaths.map((imagePath, index) => (
          <div class="custom-swiper-slide" data-index={index}>
            <a target="_blank" href={imagePath}>
              <img src={imagePath} alt={alt} loading="lazy" />
            </a>
          </div>
        ))
      }
    </div>
    {
      imagePaths.length > 1 && (
        <>
          <button class="custom-swiper-button-prev" aria-label="Previous slide">
            <svg
              width="28"
              height="28"
              viewBox="0 0 28 28"
              fill="none"
              xmlns="http://www.w3.org/2000/svg"
            >
              <circle cx="14" cy="14" r="14" fill="none" />
              <path
                d="M17 7L10 14L17 21"
                stroke="currentColor"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"
              />
            </svg>
          </button>
          <button class="custom-swiper-button-next" aria-label="Next slide">
            <svg
              width="28"
              height="28"
              viewBox="0 0 28 28"
              fill="none"
              xmlns="http://www.w3.org/2000/svg"
            >
              <circle cx="14" cy="14" r="14" fill="none" />
              <path
                d="M11 7L18 14L11 21"
                stroke="currentColor"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"
              />
            </svg>
          </button>
        </>
      )
    }
  </div>
  {
    (titles || locations || times || captions) && (
      <div class="photo-details">
        {
          imagePaths.map((_, index) => (
            <div class="photo-detail" data-index={index} style={index === 0 ? 'display: block;' : 'display: none;'}>
              {titles && (titles[index] || titles[0]) && <h3>{titles[index] || titles[0]}</h3>}
              {(locations || times) && (
                <p>
                  {locations && (locations[index] || locations[0]) && (
                    <span class="location">üìç {locations[index] || locations[0]}</span>
                  )}
                  {locations && (locations[index] || locations[0]) && times && (times[index] || times[0]) && (
                    <>&nbsp;‚Ä¢&nbsp;</>
                  )}
                  {times && (times[index] || times[0]) && (
                    <span class="time" style={`color: ${getTimeColor(times[index] || times[0])};`}>üïí {times[index] || times[0]}</span>
                  )}
                </p>
              )}
              {captions && (captions[index] || captions[0]) && <p class="caption">{captions[index] || captions[0]}</p>}
            </div>
          ))
        }
      </div>
    )
  }
</div>

<style>
  .slideshow-container {
    padding: 50px 0;
    position: relative;
  }

  .custom-swiper {
    position: relative;
    overflow: hidden;
  }

  .custom-swiper-wrapper {
    display: flex;
    transition: transform 0.5s ease-in-out;
  }

  .custom-swiper-slide {
    flex: 0 0 100%;
    text-align: center;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .custom-swiper-slide a {
    display: inline-block;
    position: relative;
  }

  .custom-swiper-slide a img {
    width: calc(100% - 2px);

    transition:
      filter 0.2s,
      box-shadow 0.2s;
  }

  .custom-swiper-slide a:hover img {
    filter: brightness(0.7);
    box-shadow: 0 2px 16px rgba(0, 0, 0, 0.25);
    cursor: pointer;
  }

  .custom-swiper-slide img {
    display: block;
    max-width: 100%;
    max-height: 75vh;
    object-fit: contain;
    margin: 0 auto;
    border-radius: 12px;
    border: 1px solid var(--stroke);
  }

  .custom-swiper-button-prev,
  .custom-swiper-button-next {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    background: rgba(0, 0, 0, 0.7);
    color: #fff;
    border: none;
    width: 48px;
    height: 48px;
    border-radius: 50%;
    font-size: 2rem;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    z-index: 10;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);
    transition:
      background 0.2s,
      transform 0.2s,
      box-shadow 0.2s;
  }

  [data-theme="dark"] .custom-swiper-button-prev,
  [data-theme="dark"] .custom-swiper-button-next {
    background: rgba(255, 255, 255, 0.2);
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.3);
  }

  .custom-swiper-button-prev {
    left: 16px;
  }

  .custom-swiper-button-next {
    right: 16px;
  }

  .custom-swiper-button-prev:hover,
  .custom-swiper-button-next:hover {
    background: #2337ff;
    color: #fff;
    transform: translateY(-50%) scale(1.1);
    box-shadow: 0 4px 16px rgba(0, 123, 255, 0.25);
  }

  .photo-details {
    text-align: center;
    margin-top: 20px;
  }

  .photo-details h3 {
    margin-bottom: 5px;
    color: var(--text-secondary);
    font-weight: 600;
  }

  .photo-details p {
    margin: 0;
    font-size: 0.9em;
    color: var(--text-primary);
  }

  .location {
    color: var(--accent);
    font-weight: 500;
  }

  .time {
    font-weight: 500;
  }

  .caption {
    font-style: italic;
    color: var(--text-muted);
    margin-top: 10px !important;
  }
</style>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const slideshows = document.querySelectorAll(".slideshow-container");

    slideshows.forEach((slideshow) => {
      const wrapper = slideshow.querySelector(".custom-swiper-wrapper");
      const slides = Array.from(
        slideshow.querySelectorAll(".custom-swiper-slide")
      );
      const nextBtn = slideshow.querySelector(".custom-swiper-button-next");
      const prevBtn = slideshow.querySelector(".custom-swiper-button-prev");
      let currentIndex = 0;
      let autoplayInterval: number | null = null;

      if (slides.length <= 1) return;

      function goToSlide(index: number) {
        if (index < 0) {
          index = slides.length - 1;
        } else if (index >= slides.length) {
          index = 0;
        }
        currentIndex = index;
        if (wrapper instanceof HTMLElement) {
          wrapper.style.transform = `translateX(-${currentIndex * 100}%)`;
        }
        
        // Update photo details
        const photoDetails = slideshow.querySelectorAll('.photo-detail');
        if (photoDetails.length > 0) {
          photoDetails.forEach((detail, i) => {
            if (detail instanceof HTMLElement) {
              detail.style.display = i === currentIndex ? 'block' : 'none';
            }
          });
        }
      }

      function startAutoplay() {
        stopAutoplay();
        autoplayInterval = window.setInterval(() => {
          goToSlide(currentIndex + 1);
        }, 5000);
      }

      function stopAutoplay() {
        if (autoplayInterval !== null) window.clearInterval(autoplayInterval);
      }

      if (nextBtn) {
        nextBtn.addEventListener("click", () => {
          goToSlide(currentIndex + 1);
          startAutoplay();
        });
      }

      if (prevBtn) {
        prevBtn.addEventListener("click", () => {
          goToSlide(currentIndex - 1);
          startAutoplay();
        });
      }

      slideshow.addEventListener("mouseenter", stopAutoplay);
      slideshow.addEventListener("mouseleave", startAutoplay);

      startAutoplay();
    });
  });
</script>
