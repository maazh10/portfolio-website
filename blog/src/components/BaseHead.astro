---
import "../styles/global.css";

interface Props {
  title: string;
  description: string;
  image?: string;
  favicon?: string;
}

const canonicalURL = new URL(Astro.url.pathname, Astro.site);

const {
  title,
  description,
  image = "/blog-placeholder-1.jpg",
  favicon,
} = Astro.props;
---

<!-- Global Metadata -->
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1" />
{
  favicon ? (
    <link
      rel="icon"
      href={`data:image/svg+xml,<svg xmlns=%22http://www.w3.org/2000/svg%22 viewBox=%220 0 100 100%22><text y=%22.9em%22 font-size=%2290%22>${favicon}</text></svg>`}
    />
  ) : (
    <link rel="icon" type="image/svg+xml" href="/stars.ico" />
  )
}
<meta name="generator" content={Astro.generator} />

<!-- Font preloads -->
<link rel="preconnect" href="https://fonts.googleapis.com" />
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />

<link
  href="https://fonts.googleapis.com/css2?family=Atkinson+Hyperlegible:ital,wght@0,400;0,700;1,400;1,700&display=swap"
  rel="stylesheet"
/>

<!-- Canonical URL -->
<link rel="canonical" href={canonicalURL} />

<!-- Primary Meta Tags -->
<title>{title}</title>
<meta name="title" content={title} />
<meta name="description" content={description} />

<!-- Open Graph / Facebook -->
<meta property="og:type" content="website" />
<meta property="og:url" content={Astro.url} />
<meta property="og:title" content={title} />
<meta property="og:description" content={description} />
<meta property="og:image" content={new URL(image, Astro.url)} />

<!-- Twitter -->
<meta property="twitter:card" content="summary_large_image" />
<meta property="twitter:url" content={Astro.url} />
<meta property="twitter:title" content={title} />
<meta property="twitter:description" content={description} />
<meta property="twitter:image" content={new URL(image, Astro.url)} />

<!-- Dark Mode Script -->
<script is:inline>
  (function () {
    function getSunsetTime(date, lat = 43.6532) {
      const dayOfYear = Math.floor(
        (date - new Date(date.getFullYear(), 0, 0)) / (1000 * 60 * 60 * 24)
      );

      let sunsetHour = 18;

      if (dayOfYear >= 80 && dayOfYear <= 172) {
        sunsetHour = 19 + ((dayOfYear - 80) / 92) * 0.5;
      } else if (dayOfYear > 172 && dayOfYear <= 266) {
        sunsetHour = 19.5 - ((dayOfYear - 172) / 94) * 1;
      } else if (dayOfYear > 266 && dayOfYear <= 355) {
        sunsetHour = 18.5 - ((dayOfYear - 266) / 89) * 1.5;
      } else {
        sunsetHour =
          17 + ((dayOfYear > 355 ? dayOfYear - 355 : dayOfYear + 10) / 80) * 1;
      }

      const latAdjustment = Math.abs(lat) > 40 ? 0.5 : 0;
      sunsetHour += latAdjustment;

      const sunset = new Date(date);
      sunset.setHours(
        Math.floor(sunsetHour),
        Math.round((sunsetHour % 1) * 60),
        0,
        0
      );

      return sunset;
    }

    function getSunriseTime(date, lat = 43.6532) {
      const sunset = getSunsetTime(date, lat);
      const sunrise = new Date(sunset);
      sunrise.setHours(sunrise.getHours() - 12);

      return sunrise;
    }

    function shouldUseDarkMode() {
      const now = new Date();
      const sunset = getSunsetTime(now);
      const sunrise = getSunriseTime(now);

      return now >= sunset || now < sunrise;
    }

    function applyTheme() {
      if (shouldUseDarkMode()) {
        document.documentElement.setAttribute("data-theme", "dark");
      } else {
        document.documentElement.setAttribute("data-theme", "light");
      }
    }

    applyTheme();

    setInterval(applyTheme, 300000);
  })();
</script>
