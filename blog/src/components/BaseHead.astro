---
import "../styles/global.css";

interface Props {
  title: string;
  description: string;
  image?: string;
  favicon?: string;
}

const canonicalURL = new URL(Astro.url.pathname, Astro.site);

const {
  title,
  description,
  image = "/blog-placeholder-1.jpg",
  favicon,
} = Astro.props;
---

<!-- Global Metadata -->
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1" />
{
  favicon ? (
    <link
      rel="icon"
      href={`data:image/svg+xml,<svg xmlns=%22http://www.w3.org/2000/svg%22 viewBox=%220 0 100 100%22><text y=%22.9em%22 font-size=%2290%22>${favicon}</text></svg>`}
    />
  ) : (
    <link rel="icon" type="image/svg+xml" href="/stars.ico" />
  )
}
<meta name="generator" content={Astro.generator} />

<!-- Font preloads -->
<link rel="preconnect" href="https://fonts.googleapis.com" />
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />

<link
  href="https://fonts.googleapis.com/css2?family=Atkinson+Hyperlegible:ital,wght@0,400;0,700;1,400;1,700&display=swap"
  rel="stylesheet"
/>

<!-- Canonical URL -->
<link rel="canonical" href={canonicalURL} />

<!-- Primary Meta Tags -->
<title>{title}</title>
<meta name="title" content={title} />
<meta name="description" content={description} />

<!-- Open Graph / Facebook -->
<meta property="og:type" content="website" />
<meta property="og:url" content={Astro.url} />
<meta property="og:title" content={title} />
<meta property="og:description" content={description} />
<meta property="og:image" content={new URL(image, Astro.url)} />

<!-- Twitter -->
<meta property="twitter:card" content="summary_large_image" />
<meta property="twitter:url" content={Astro.url} />
<meta property="twitter:title" content={title} />
<meta property="twitter:description" content={description} />
<meta property="twitter:image" content={new URL(image, Astro.url)} />

<!-- Dark Mode Script -->
<script is:inline>
  (function () {
    function shouldUseDarkMode() {
      const hour = new Date().getHours();
      return hour >= 20 || hour < 6;
    }

    function getCurrentTheme() {
      return document.documentElement.getAttribute("data-theme") || "light";
    }

    function setTheme(theme) {
      document.documentElement.setAttribute("data-theme", theme);
    }

    function applyDefaultTheme() {
      if (shouldUseDarkMode()) {
        setTheme("dark");
      } else {
        setTheme("light");
      }
    }

    function toggleTheme() {
      const currentTheme = getCurrentTheme();
      const newTheme = currentTheme === "dark" ? "light" : "dark";
      setTheme(newTheme);
    }

    window.toggleTheme = toggleTheme;

    applyDefaultTheme();

    setInterval(() => {

      const currentTheme = getCurrentTheme();
      const defaultTheme = shouldUseDarkMode() ? "dark" : "light";
      
      if (currentTheme === defaultTheme) {
        applyDefaultTheme();
      }
    }, 60000);

    document.addEventListener("DOMContentLoaded", function () {
      const toggles = document.querySelectorAll(
        ".theme-toggle, .theme-toggle-minimal, #theme-toggle"
      );

      toggles.forEach((toggle) => {
        if (toggle) {
          toggle.addEventListener("click", toggleTheme);
        }
      });
    });
  })();
</script>
